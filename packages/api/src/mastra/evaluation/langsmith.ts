/**
 * LangSmith integration for Mastra agent evaluation and tracing.
 * Provides utilities for monitoring agent performance and debugging complex behaviors.
 *
 * @module packages/api/src/mastra/evaluation
 */

import { LangChainTracer } from 'langsmith/traceable';
import { getEnvVar } from '../utils';

/**
 * Configuration options for the LangSmith tracer
 */
interface TracerConfig {
  /** Project name for grouping traces */
  projectName?: string;

  /** Custom tags to apply to traces */
  tags?: string[];

  /** Whether tracing is enabled */
  enabled?: boolean;
}

/**
 * Default configuration for the LangSmith tracer
 */
const DEFAULT_CONFIG: TracerConfig = {
  projectName: 'mastra-agents',
  tags: ['production'],
  enabled: getEnvVar('LANGCHAIN_TRACING_V2', 'false') === 'true',
};

/**
 * LangSmith tracer instance
 */
let tracer: LangChainTracer | null = null;

/**
 * Initialize the LangSmith tracer with the provided configuration
 *
 * @param config - Configuration options for the tracer
 * @returns The initialized tracer instance or null if tracing is disabled
 */
export function initTracer(
  config: TracerConfig = DEFAULT_CONFIG,
): LangChainTracer | null {
  if (!config.enabled) {
    console.info('LangSmith tracing is disabled');
    return null;
  }

  try {
    // Check for required environment variables
    const langsmithEndpoint = getEnvVar('LANGSMITH_ENDPOINT', '');
    const langsmithApiKey = getEnvVar('LANGSMITH_API_KEY', '');

    if (!langsmithEndpoint || !langsmithApiKey) {
      console.warn(
        'LangSmith tracing is enabled but missing required environment variables',
      );
      return null;
    }

    // Set up LangSmith environment variables
    process.env.LANGSMITH_TRACING_V2 = 'true';
    process.env.LANGSMITH_ENDPOINT = langsmithEndpoint;
    process.env.LANGSMITH_API_KEY = langsmithApiKey;

    // Initialize the tracer
    tracer = new LangChainTracer({
      projectName: config.projectName,
      tags: config.tags,
      enabled: config.enabled,
    });

    console.info(
      `LangSmith tracer initialized for project: ${config.projectName}`,
    );

    return tracer;
  } catch (error) {
    console.error('Failed to initialize LangSmith tracer:', error);
    return null;
  }
}

/**
 * Get the current LangSmith tracer instance
 *
 * @returns The current tracer instance or null if not initialized
 */
export function getTracer(): LangChainTracer | null {
  if (!tracer) {
    return initTracer();
  }

  return tracer;
}

/**
 * Trace a Mastra agent interaction
 *
 * @param agentName - The name of the agent
 * @param input - The input provided to the agent
 * @param output - The output generated by the agent
 * @param metadata - Additional metadata about the interaction
 * @returns The trace ID if successful, null otherwise
 */
export async function traceAgentInteraction(
  agentName: string,
  input: unknown,
  output: unknown,
  metadata: Record<string, unknown> = {},
): Promise<string | null> {
  const currentTracer = getTracer();

  if (!currentTracer) {
    return null;
  }

  try {
    const run = await currentTracer.createRun({
      name: `${agentName}-interaction`,
      run_type: 'chain',
      inputs: { input },
    });

    await currentTracer.updateRun(run.id, {
      outputs: { output },
      metadata: {
        ...metadata,
        agent: agentName,
        timestamp: new Date().toISOString(),
      },
    });

    await currentTracer.finalizeRun(run.id);

    return run.id;
  } catch (error) {
    console.error('Error tracing agent interaction:', error);
    return null;
  }
}

/**
 * Export the LangSmith integration
 */
export const langsmith = {
  initTracer,
  getTracer,
  traceAgentInteraction,
};
